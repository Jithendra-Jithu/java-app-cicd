trigger:
  branches:
    include:
      - main
      - develop

pr:
  branches:
    include:
      - main
      - develop

variables:
  dockerRegistryServiceConnection: 'YourDockerRegistryServiceConnection'
  acrLoginServer: 'youracr.azurecr.io'
  imageName: 'springboot-demo'
  k8sNamespace: 'default'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build & Test Stage'
    jobs:
      - job: Build
        steps:
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=false'
              mavenOptions: '-Xmx1024m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'target/demo-0.0.1-SNAPSHOT.jar'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: DockerBuildPush
    displayName: 'Build and Push Docker Image'
    dependsOn: Build
    jobs:
      - job: Docker
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageName)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)

  - stage: Deploy
    displayName: 'Deploy to AKS'
    dependsOn: DockerBuildPush
    jobs:
      - job: Deploy
        steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'YourAzureSubscription'
              azureResourceGroup: 'your-resource-group'
              kubernetesCluster: 'your-aks-cluster'
              namespace: '$(k8sNamespace)'
              command: 'apply'
              useConfigurationFile: true
              configuration: |
                k8s/deployment.yaml
                k8s/service.yaml
